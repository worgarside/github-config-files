---
name: '"Create Pull Request" Runner'

on:
  workflow_call:
    inputs:
      base-ref-name:
        description: The base branch's name (target branch)
        required: true
        type: string
      fail-loudly:
        description: Whether to fail loudly if the PR cannot be created
        required: false
        type: boolean
        default: false
      head-ref-name:
        description: The head branch's name (source branch)
        required: true
        type: string
      pr-title:
        description: The PR title
        required: true
        type: string
      pr-body:
        description: The PR body
        required: false
        type: string
      pr-reviewer:
        description: The PR reviewer
        required: false
        type: string
        default: ${{ github.repository_owner }}
      pr-draft:
        description: Whether the PR should be a draft
        required: false
        type: boolean
        default: true
      pr-labels:
        description: Comma-separated list of labels to apply to the PR
        required: false
        type: string
      update-pr-body-if-exists:
        description: |
          Whether to update the PR body if it already exists. Will use the `pr-body`
          input as the new body if it is provided, `--fill` otherwise.
        required: false
        type: boolean
        default: false

jobs:
  create-pr:
    name: Create PR
    runs-on: ubuntu-latest
    outputs:
      create-pr: ${{ steps.check-if-pr-exists.outputs.create-pr }}
      existing-pr-url: ${{ steps.check-if-pr-exists.outputs.existing-pr-url }}
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

      - name: Check If PR Exists
        id: check-if-pr-exists
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        # yamllint disable rule:line-length
        run: |
          existing_pr=$(
            gh pr list \
            --repo ${{ github.repository }} \
            --json baseRefName,headRefName,title,url \
            --jq '
              .[] | select(
                .baseRefName == "${{ inputs.base-ref-name }}"
              ) | select(
                .headRefName == "${{ inputs.head-ref-name }}"
              )
            '
          )

          if [[ -z "$existing_pr" ]]; then
              echo "create-pr=true" >> "$GITHUB_OUTPUT"
              echo "existing-pr-url=null" >> "$GITHUB_OUTPUT"
          else
              pr_url=$(echo $existing_pr | jq -r '.url')

              echo -e "Existing [PR]($pr_url) found: \n\`\`\`json\n" >> "$GITHUB_STEP_SUMMARY"
              echo $existing_pr | jq >> "$GITHUB_STEP_SUMMARY"
              echo -e "\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

              echo "create-pr=false" >> "$GITHUB_OUTPUT"
              echo "existing-pr-url=$pr_url" >> "$GITHUB_OUTPUT"
          fi
        # yamllint enable rule:line-length

      # Git history needed for PR body auto-fill and commit check
      - name: Clone Repo
        if: steps.check-if-pr-exists.outputs.create-pr == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.base-ref-name }}
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Check for Commits
        id: check-commits
        if: steps.check-if-pr-exists.outputs.create-pr == 'true'
        continue-on-error: ${{ inputs.fail-loudly != 'true' }}
        # yamllint disable rule:line-length
        run: |
          git checkout ${{ inputs.head-ref-name }}

          if ! git log origin/${{ inputs.base-ref-name }}..${{ inputs.head-ref-name }} --oneline | grep -q '.*'; then
            echo "No new commits to push. Skipping PR creation."
            exit 1
          fi
        # yamllint enable rule:line-length

      - name: Get Commits
        if: steps.check-if-pr-exists.outputs.create-pr == 'true' && !inputs.pr-body
        id: get-commits
        run: |
          commit_messages=$(
            git log \
              --no-merges \
              --pretty=format:"- %h | %s" \
              "${{ inputs.base-ref-name }}..${{ inputs.head-ref-name }}"
          )

          commit_messages=$(echo -e "$commit_messages\n" | tac)

          echo -e "$commit_messages" >> "$GITHUB_STEP_SUMMARY"
          echo -e "$commit_messages" > commit_messages.txt

      - name: Create PR
        if: >-
          steps.check-commits.outcome == 'success' &&
          steps.check-if-pr-exists.outputs.create-pr == 'true'
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
          PR_BODY_ARG: >-
            ${{
              inputs.pr-body && format('--body "{0}"', inputs.pr-body) ||
              '--body-file commit_messages.txt'
            }}
          PR_DRAFT_ARG: ${{ inputs.pr-draft && '--draft' || '' }}
          PR_TITLE: ${{ inputs.pr-title }}
          PR_LABELS_ARG: ${{ inputs.pr-labels && format('--label {0}', inputs.pr-labels ) || '' }}
        run: |
          gh pr create \
            --repo ${{ github.repository }} \
            --title "$PR_TITLE" \
            $PR_BODY_ARG \
            --base "${{ inputs.base-ref-name }}" \
            --head "${{ inputs.head-ref-name }}" \
            --reviewer ${{ inputs.pr-reviewer }} \
            $PR_LABELS_ARG \
            $PR_DRAFT_ARG

  update-pr:
    name: Update PR
    runs-on: ubuntu-latest
    needs: create-pr
    if: |
      inputs.update-pr-body-if-exists &&
      needs.create-pr.outputs.create-pr == 'false' &&
      needs.create-pr.outputs.existing-pr-url != 'null'
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.base-ref-name }}
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Update PR
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          if [ -z "${{ inputs.pr-body }}" ] || [ "${{ inputs.pr-body }}" == "--fill" ]
          then
            git checkout ${{ inputs.head-ref-name }}

            commit_messages=$(
              git log \
                --no-merges \
                --pretty=format:"- %h | %s" \
                "${{ inputs.base-ref-name }}..${{ inputs.head-ref-name }}"
            )

            commit_messages=$(echo -e "$commit_messages\n" | tac)

            echo -e "$commit_messages" >> "$GITHUB_STEP_SUMMARY"
            echo -e "$commit_messages" > commit_messages.txt

            gh pr edit \
              ${{ needs.create-pr.outputs.existing-pr-url }} \
              --body-file commit_messages.txt
          else
            gh pr edit \
              ${{ needs.create-pr.outputs.existing-pr-url }} \
              --body '${{ inputs.pr-body }}'
          fi
