---
name: '"Deploy" Runner'

on:
  workflow_call:
    inputs:
      deploy-to:
        description: |
          Where to deploy to. Options:
            - pypi
            - submodule:<organisation>/<repository>/path/to/submodule
        required: false
        type: string
      environment:
        description: The environment to deploy to
        required: true
        type: string
      release-tag:
        description: The tag of the release to add the artifacts to
        required: true
        type: string

jobs:
  log-inputs:
    name: Log Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

  add-artifacts-to-release-notes:
    name: Add Artifacts to Release Notes
    runs-on: ubuntu-latest
    if: inputs.release-tag != 'null' && !startsWith(inputs.deploy-to, 'submodule:')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ inputs.environment }}
          path: dist/

      - name: Upload Artifacts
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          gh release upload ${{ inputs.release-tag }} dist/* \
          --clobber \
          --repo ${{ github.repository }}

      - name: Summarise Environment
        # yamllint disable rule:line-length
        run: |
          echo -e "Environment:  \`${{ inputs.environment }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo -e "Release Tag:  \`${{ inputs.release-tag }}\`" >> "$GITHUB_STEP_SUMMARY"
        # yamllint enable rule:line-length

      - name: Publish Release Notes
        if: inputs.environment == 'production' && !inputs.deploy-to
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          gh release edit ${{ inputs.release-tag }} \
            --draft=false \
            --repo ${{ github.repository }}

  deploy-to-pypi:
    name: Deploy to PyPi
    environment: ${{ inputs.environment }}
    if: |
      always() && !failure() &&
      needs.add-artifacts-to-release-notes.result == 'success' &&
      inputs.deploy-to == 'pypi'
    needs:
      - add-artifacts-to-release-notes
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ inputs.environment }}
          path: dist/

      - name: Deploy to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: ${{ inputs.environment == 'development' }}
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ vars.REPOSITORY_URL }}

      - name: Publish Release Notes
        if: inputs.environment == 'production'
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          gh release edit ${{ inputs.release-tag }} \
            --draft=false \
            --repo ${{ github.repository }}

  deploy-as-submodule:
    name: Deploy as Submodule
    environment: ${{ inputs.environment }}
    if: |
      inputs.environment == 'production' &&
      startsWith(inputs.deploy-to, 'submodule:')
    runs-on: ubuntu-latest
    steps:
      - name: Get Target Repo
        id: get-target-repo
        env:
          DEPLOY_TO: ${{ inputs.deploy-to }}
        run: |
          repo=$(echo $DEPLOY_TO | awk -F':' '{print $2}' | awk -F'/' '{print $1 "/" $2}')
          path=$(echo $DEPLOY_TO | cut -d'/' -f3-)

          echo "repo=${repo}" >> "${GITHUB_OUTPUT}"
          echo "submodule-path=${path}" >> "${GITHUB_OUTPUT}"

          echo -e "Target repository: \`${repo}\`" >> "${GITHUB_STEP_SUMMARY}"
          echo -e "Submodule path: \`${path}\`" >> "${GITHUB_STEP_SUMMARY}"

      - name: Clone Target Repo
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          ref: main
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
          repository: ${{ steps.get-target-repo.outputs.repo }}
          fetch-depth: 0
          path: target-repo

      # Only do this once the target repo has been cloned successfully
      - name: Publish Release Notes
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          gh release edit ${{ inputs.release-tag }} \
            --draft=false \
            --repo ${{ github.repository }}

      - name: Update Submodule
        env:
          GH_TOKEN: ${{ secrets.SUBMODULE_DEPLOYMENT_TOKEN || secrets.WORGARSIDE_DEV_TOKEN }}
          SUBMODULE_EMAIL: ${{ vars.SUBMODULE_DEPLOYMENT_EMAIL }}
          SUBMODULE_USERNAME: ${{ vars.SUBMODULE_DEPLOYMENT_USERNAME }}
        run: |
          cd target-repo

          git config user.email "${SUBMODULE_EMAIL}"
          git config user.name "${SUBMODULE_USERNAME}"

          git submodule init
          git submodule update

          ROOT_DIR=$(pwd)

          cd ${{ steps.get-target-repo.outputs.submodule-path }}
          git fetch --tags
          git checkout tags/${{ inputs.release-tag }}

          cd "${ROOT_DIR}"

          git add ${{ steps.get-target-repo.outputs.submodule-path }}
          git commit -m "Bump \`${{ github.repository }}\` to ${{ inputs.release-tag }}"\

          git push "https://${GH_TOKEN}@github.com/${{ steps.get-target-repo.outputs.repo }}" \
            HEAD:refs/heads/chore/${{ github.repository }}/${{ inputs.release-tag }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.SUBMODULE_DEPLOYMENT_TOKEN || secrets.WORGARSIDE_DEV_TOKEN }}
          PR_BODY_FILE: /tmp/pr_body.txt
        # yamllint disable rule:line-length
        run: |
          release_link="# [${{ inputs.release-tag }}](https://github.com/${{ github.repository }}/releases/tag/${{ inputs.release-tag }})"

          release_notes=$(
            gh release view ${{ inputs.release-tag }} --repo ${{ github.repository }} --json body --jq '.body'
          )

          echo -e "${release_link}\n${release_notes}" >> "${PR_BODY_FILE}"

          sed -i 's|(\(#\([0-9]\+\)\))$|(${{ github.repository }}#\2)|g' "${PR_BODY_FILE}"

          cat "${PR_BODY_FILE}" >> "${GITHUB_STEP_SUMMARY}"

          pr_url=$(
            gh pr create \
              --repo ${{ steps.get-target-repo.outputs.repo }} \
              --title "Bump \`${{ github.repository }}\` to ${{ inputs.release-tag }}" \
              --body-file "${PR_BODY_FILE}" \
              --base "main" \
              --head "refs/heads/chore/${{ github.repository }}/${{ inputs.release-tag }}" \
              --reviewer ${{ github.repository_owner }}
          )

          gh pr merge --delete-branch --squash --auto "$pr_url"
        # yamllint enable rule:line-length
