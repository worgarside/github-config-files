---
name: '"Build" Runner'

on:
  workflow_call:
    inputs:
      build-branch:
        description: The branch to build from
        required: true
        type: string
      build-type:
        description: The type of build to perform ("python", "node")
        required: true
        type: string
      environment:
        description: The environment to build for
        required: true
        type: string
      node-build-directory:
        description: The directory to build the Node project in
        required: false
        type: string
        default: .
      python-version:
        description: The Python version to build with
        required: false
        type: string
        default: '3.11'
      release-tag:
        description: The tag of the release to add the artifacts to
        required: true
        type: string

jobs:
  build-python:
    name: Build (Python)
    if: inputs.build-type == 'python'
    runs-on: ubuntu-latest
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build-branch }}

      - name: Load cached .local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-${{ inputs.python-version }}  # yamllint disable-line rule:line-length

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load Cached Venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ inputs.python-version }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Bump Version for Dev Build
        if: inputs.release-tag != 'null' && inputs.environment != 'production'
        run: poetry version ${{ inputs.release-tag }}

      - name: Build
        run: poetry build

      - name: Upload Artifact
        if: inputs.release-tag != 'null'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ inputs.environment }}
          path: dist/

  build-node:
    name: Build (Node)
    if: inputs.build-type == 'node'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: ${{ inputs.release-tag }}-${{ inputs.environment }}.zip
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
          ref: ${{ inputs.build-branch }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ${{ inputs.node-build-directory }}/package-lock.json
          node-version: 18

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/${{ inputs.node-build-directory }}/.next/cache
          # yamllint disable-line rule:line-length
          key: nextjs-${{ inputs.environment }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ inputs.environment }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Install Dependencies
        working-directory: ${{ inputs.node-build-directory }}
        run: npm ci --verbose

      - name: Build
        working-directory: ${{ inputs.node-build-directory }}
        run: |
          npm run build

      - name: Zip Build Directory
        if: inputs.release-tag != 'null'
        working-directory: ${{ inputs.node-build-directory }}
        run: |
          zip -r "$ARTIFACT_NAME" .next/

      - name: Upload Artifact
        if: inputs.release-tag != 'null'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ inputs.environment }}
          path: ${{ inputs.node-build-directory }}/${{ env.ARTIFACT_NAME }}
