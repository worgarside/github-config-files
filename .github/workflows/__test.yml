---
name: '"Test" Runner'

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      test-branch:
        type: string
        description: Branch to run tests on
        required: true
      python-version:
        description: The Python version to build with
        required: false
        type: string
        default: '3.11'

jobs:
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # I'm developing on macOS, so this should be covered
          # - macos-latest
        python-version:
          - '3.11'
          - '3.12'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test-branch }}

      - name: Load cached .local
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load Cached Venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --all-extras --sync

      - name: Run Tests
        id: unit_tests
        continue-on-error: true
        run: poetry run pytest --cov=./ --cov-report=xml

      - name: Upload `coverage.xml` Artifact
        if: matrix.python-version == inputs.python-version
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: ./coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == inputs.python-version
        uses: codecov/codecov-action@v4
        with:
          flags: unittests
          fail_ci_if_error: true
          verbose: true
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check on UT failures
        if: steps.unit_tests.outcome != 'success'
        run: exit 1
