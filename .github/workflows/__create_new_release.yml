---
name: '"Create New Release" Runner'

on:
  workflow_call:
    inputs:
      path-to-__version__-file:
        description: The path to a Python file containing a `__version__` variable
        required: false
        type: string
      update-pyproject-toml:
        description: Update the pyproject.toml version
        required: false
        default: true
        type: boolean
      update-json-file-path:
        description: The path to a JSON file containing a `version` top level key
        required: false
        type: string
      update-yaml-file-path:
        description: The path to a YAML file containing a `version` variable
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  get-existing-release-branch:
    name: Check for Existing Release Branch
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
    outputs:
      pending-release-tag: ${{ steps.get-release-branch.outputs.pending-release-tag }}
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Get Release Branch(es)
        id: get-release-branch
        # yamllint disable rule:line-length
        run: |
          git_output=$(git branch -r --list 'origin/release/*')

          echo -e "\`\`\`bash\n> git branch -r --list 'origin/release/*'\n$git_output\n\`\`\`\n---\n" >> "$GITHUB_STEP_SUMMARY"

          if [[ -z "$git_output" ]]; then
            echo "No branches found :kissing::ok_hand:" >> "$GITHUB_STEP_SUMMARY"
            echo "pending-release-tag=null" >> "$GITHUB_OUTPUT"
          elif [[ $(echo "$git_output" | wc -l) -gt 1 ]]; then
            echo -e "More than 1 release branch found: \n\`\`\`\n$git_output\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          else
            pending_release_tag=${git_output#  origin/release/}
            echo -e "1 branch found: \`release/$pending_release_tag\`" >> "$GITHUB_STEP_SUMMARY"
            echo "pending-release-tag=$pending_release_tag" >> "$GITHUB_OUTPUT"
          fi
        # yamllint enable rule:line-length

  derive-release-branch-name:
    name: Derive Release Branch Name
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
    outputs:
      branch: ${{ steps.get-release-version.outputs.release-branch }}
      tag: ${{ steps.get-release-version.outputs.release-tag }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Get SemVer Label
        id: get-semver-label
        # yamllint disable rule:line-length
        run: |
          latest_release=$(gh release view --json publishedAt,tagName) ||
            latest_release='{"publishedAt": "1970-01-01T00:00:00Z", "tagName": "0.0.0"}'

          echo -e "\`\`\`bash\n> gh release view --json publishedAt,tagName\n${{ toJson('$latest_release') }}\n\`\`\`\n---\n" >> "$GITHUB_STEP_SUMMARY"

          latest_release_tag=$(echo "$latest_release" | jq -r '.tagName')
          latest_release_date=$(echo "$latest_release" | jq -r '.publishedAt')

          echo "\`latest_release_tag\`: \`$latest_release_tag\`" >> "$GITHUB_STEP_SUMMARY"
          echo "\`latest_release_date\`: \`$latest_release_date\`" >> "$GITHUB_STEP_SUMMARY"

          echo "latest-release-tag=$latest_release_tag" >> "$GITHUB_OUTPUT"

          all_prs=$(
            gh pr list \
            --state merged \
            --json baseRefName,headRefName,labels,number,mergedAt,title,url \
            --limit 100 \
            --jq '
                .[] |
                select(
                  (.baseRefName == "develop") and
                  (.headRefName != "repo-sync/github-config-files/default") and
                  (
                    .labels |
                    map(.name) |
                    index("skip-changelog") |
                    not
                  ) and
                  (
                    .labels |
                    map(.name) |
                    index("non-functional") |
                    not
                  )
                )
            '
          )

          echo -e "All PRs\n\`\`\`json\n$all_prs\n\`\`\`\n---\n" >> "$GITHUB_STEP_SUMMARY"

          new_prs=$(
            echo "$all_prs" |
            jq -r --arg latest_release_date "$latest_release_date" '
              select(.mergedAt > $latest_release_date)
            '
          )

          echo -e "New PRs\n\`\`\`json\n$new_prs\n\`\`\`\n---\n" >> "$GITHUB_STEP_SUMMARY"

          new_pr_labels=$(
            echo "$new_prs" |
            jq -r '
              .labels[] |
              select(
                .name == "dependencies" or
                .name == "major" or
                .name == "minor" or
                .name == "patch" or
                .name == "bug"
              ) |
              .name
            '
          )

          echo -e "New PR labels:\n\`\`\`\n$new_pr_labels\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

          if echo "$new_pr_labels" | grep -q 'major' ||
            [ "$new_pr_labels" = "major" ]
          then
              semver_label="major"
          elif echo "$new_pr_labels" | grep -q 'minor' ||
            [  "$new_pr_labels" = "minor" ]
          then
              semver_label="minor"
          elif echo "$new_pr_labels" | grep -q 'dependencies' ||
            echo "$new_pr_labels" | grep -q 'patch' ||
            echo "$new_pr_labels" | grep -q 'bug' ||
            [ "$new_pr_labels" = "dependencies" ] ||
            [ "$new_pr_labels" = "patch" ] ||
            [ "$new_pr_labels" = "bug" ]
          then
              semver_label="patch"
          else
              echo "No matching label found" >> "$GITHUB_STEP_SUMMARY"
              echo -e "\`\`\`\n$new_pr_labels\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

              semver_label="null"
          fi

          echo "semver-label=$semver_label" >> "$GITHUB_OUTPUT"
          echo "\`semver_label\`: \`$semver_label\`" >> "$GITHUB_STEP_SUMMARY"
        # yamllint enable rule:line-length

      - name: Get Release Branch Name
        id: get-release-version
        # yamllint disable rule:line-length
        run: |
          if [[ "${{ steps.get-semver-label.outputs.semver-label }}" == "null" ]]; then
            echo "No release branch will be created" >> "$GITHUB_STEP_SUMMARY"
            echo "release-branch=null" >> "$GITHUB_OUTPUT"
            echo "release-tag=null" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          IFS=. read major minor patch <<< "${{ steps.get-semver-label.outputs.latest-release-tag }}"

          echo "Major: \`$major\`" >> "$GITHUB_STEP_SUMMARY"
          echo "Minor: \`$minor\`" >> "$GITHUB_STEP_SUMMARY"
          echo "Patch: \`$patch\`" >> "$GITHUB_STEP_SUMMARY"

          case "${{ steps.get-semver-label.outputs.semver-label }}" in
            major)
              echo "SemVer label is major" >> "$GITHUB_STEP_SUMMARY"
              major=$(expr $major + 1)
              echo "Incremented major to $major" >> "$GITHUB_STEP_SUMMARY"
              minor=0
              patch=0
              ;;
            minor)
              echo "SemVer label is minor" >> "$GITHUB_STEP_SUMMARY"
              minor=$(expr $minor + 1)
              echo "Incremented minor to $minor" >> "$GITHUB_STEP_SUMMARY"
              patch=0
              ;;
            patch)
              echo "SemVer label is patch" >> "$GITHUB_STEP_SUMMARY"
              patch=$(expr $patch + 1)
              echo "Incremented patch to $patch" >> "$GITHUB_STEP_SUMMARY"
              ;;
          esac

          release_tag="$major.$minor.$patch"

          echo "release-tag=$release_tag" >> "$GITHUB_OUTPUT"
          echo "release-branch=release/$release_tag" >> "$GITHUB_OUTPUT"
          echo "\`release-tag\`: \`$release_tag\`" >> "$GITHUB_STEP_SUMMARY"
          echo "\`release-branch\`: \`release/$release_tag\`" >> "$GITHUB_STEP_SUMMARY"
        # yamllint enable rule:line-length

  # --------------------------------------------------------------------------------- #
  # From here, if the existing branch is for the correct release then it is rebased   #
  # to ensure it is up to date with the latest changes, otherwise it is deleted and a #
  # a new one is created.                                                             #
  # --------------------------------------------------------------------------------- #

  # If the pending release is the same as the release we want to create, then rebase
  # the existing branch to ensure it is up to date with the latest changes
  rebase-release-branch:
    name: Rebase Release Branch
    runs-on: ubuntu-latest
    needs:
      - get-existing-release-branch
      - derive-release-branch-name
    if: |
      needs.derive-release-branch-name.outputs.tag != 'null' &&
      needs.get-existing-release-branch.outputs.pending-release-tag ==
        needs.derive-release-branch-name.outputs.tag
    env:
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
    outputs:
      status: ${{ steps.rebase-release-branch.outputs.status }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.derive-release-branch-name.outputs.branch }}
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Rebase Release Branch
        id: rebase-release-branch
        run: |
          release_branch="${{ needs.derive-release-branch-name.outputs.branch }}"

          git config --global user.name "worgarside-dev"
          git config --global user.email "worgarside.dev@gmail.com"

          git checkout develop
          git pull origin develop

          git checkout "$release_branch"

          if ! git rebase develop; then
            echo "Rebase failed. Exiting."
            echo "status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "status=success" >> "$GITHUB_OUTPUT"

          git push origin "$release_branch" --force

  # If pending-release-tag is not null, and is not the same as the release we want to
  # create, then delete the pending release. This also runs if `rebase-release-branch`
  # fails, as we want to delete the pending release in that case too
  delete-pending-release:
    name: Delete Pending Release
    runs-on: ubuntu-latest
    needs:
      - get-existing-release-branch
      - derive-release-branch-name
      - rebase-release-branch
    env:
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
    if: |
      always() && !cancelled() &&
      needs.get-existing-release-branch.outputs.pending-release-tag != 'null' &&
        needs.derive-release-branch-name.outputs.tag != 'null' &&
      needs.get-existing-release-branch.outputs.pending-release-tag !=
        needs.derive-release-branch-name.outputs.tag &&
      needs.rebase-release-branch.outputs.status != 'success'
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Delete Release Branch
        run: |
          git push origin --delete \
            release/${{ needs.get-existing-release-branch.outputs.pending-release-tag }}

  # If nothing has failed, and there is no pending release, or the pending release is
  # not the same as the release we want to create, then create the new release branch
  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    needs:
      - get-existing-release-branch
      - derive-release-branch-name
      - delete-pending-release
    if: |
      always() && !cancelled() &&
      needs.get-existing-release-branch.result == 'success' &&
      needs.derive-release-branch-name.result == 'success' &&
      needs.derive-release-branch-name.outputs.tag != 'null' &&
      (
        needs.get-existing-release-branch.outputs.pending-release-tag ==
        'null' ||
        needs.get-existing-release-branch.outputs.pending-release-tag !=
        needs.derive-release-branch-name.outputs.tag
      )
    env:
      GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
      TAG: ${{ needs.derive-release-branch-name.outputs.tag }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Create Release Branch
        run: |
          git config --global user.name "worgarside-dev"
          git config --global user.email "worgarside.dev@gmail.com"
          git checkout -b \
            ${{ needs.derive-release-branch-name.outputs.branch }}

      - name: Update `${{ inputs.path-to-__version__-file }}` __version__
        if: inputs.path-to-__version__-file
        # yamllint disable rule:line-length
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"$TAG\"/" ${{ inputs.path-to-__version__-file }}
          git add ${{ inputs.path-to-__version__-file }}
        # yamllint enable rule:line-length

      - name: Update `pyproject.toml` Version
        if: inputs.update-pyproject-toml
        # yamllint disable rule:line-length
        run: |
          sed -i "s/^version = .*/version = \"$TAG\"/" pyproject.toml
          git add pyproject.toml
        # yamllint enable rule:line-length

      - name: Update `${{ inputs.update-json-file-path }}` Version
        if: inputs.update-json-file-path
        # yamllint disable rule:line-length
        run: |
          sed -i "s/^  \"version\": \".*\",/  \"version\": \"$TAG\",/" ${{ inputs.update-json-file-path }}
          git add ${{ inputs.update-json-file-path }}

      - name: Update `${{ inputs.update-yaml-file-path }}` Version
        if: inputs.update-yaml-file-path
        # yamllint disable rule:line-length
        run: |
          sed -i "s/^version: .*/version: $TAG/" ${{ inputs.update-yaml-file-path }}
          git add ${{ inputs.update-yaml-file-path }}
        # yamllint enable rule:line-length

      - name: Commit Changes
        run: |
          git commit \
            -m "Bump version to $TAG" \
            --allow-empty

      - name: Push Branch
        run: |
          git push origin \
            ${{ needs.derive-release-branch-name.outputs.branch }}

  # Create a pull request for the release branch if a release tag has been derived, and
  # the release branch has been created or rebased successfully
  create-pr:
    name: Create PR
    needs:
      - derive-release-branch-name
      - rebase-release-branch
      - create-release-branch
    if: |
      always() && !cancelled() &&
      needs.derive-release-branch-name.outputs.tag != 'null' &&
      needs.derive-release-branch-name.result == 'success' &&
      (
        needs.rebase-release-branch.result == 'success' ||
        needs.create-release-branch.result == 'success'
      )
    # yamllint disable rule:line-length
    uses: worgarside/github-config-files/.github/workflows/__create_pull_request.yml@main
    with:
      base-ref-name: main
      head-ref-name: ${{ needs.derive-release-branch-name.outputs.branch }}
      pr-title: Release ${{ needs.derive-release-branch-name.outputs.tag }}
      pr-draft: false
      update-pr-body-if-exists: true
      pr-labels: bot:delete-on-merge,release
    secrets: inherit

  draft-release:
    name: Draft Release
    needs:
      - derive-release-branch-name
      - rebase-release-branch
      - create-release-branch
    if: |
      always() && !cancelled() &&
      needs.derive-release-branch-name.outputs.tag != 'null' &&
      needs.derive-release-branch-name.result == 'success' &&
      (
        needs.rebase-release-branch.result == 'success' ||
        needs.create-release-branch.result == 'success'
      )
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.derive-release-branch-name.outputs.branch }}
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Validate `pyproject.toml` version
        if: inputs.update-pyproject-toml
        # yamllint disable rule:line-length
        run: |
          expected_line="version = \"${{ needs.derive-release-branch-name.outputs.tag }}\""
          actual_line=$(grep -E "^version = \"" pyproject.toml)
          if [ "$expected_line" != "$actual_line" ]
          then
              echo "\`pyproject.toml\` version is invalid: \`$actual_line\`" >> "$GITHUB_STEP_SUMMARY"
              exit 1
          fi
        # yamllint enable rule:line-length

      - name: Draft Release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
