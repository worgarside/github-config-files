---
name: '"CI: Deployment" Runner'

on:
  workflow_call:
    inputs:
      build-branch:
        description: The branch to build from
        required: false
        type: string
      build-type:
        description: The type of build to perform ("python", "node")
        required: false
        type: string
      deploy-to:
        description: |
          Where to deploy to. Options:
            - pypi
            - submodule:<organisation>/<repository>/path/to/submodule
        required: false
        type: string
      node-build-directory:
        description: The directory to build the Node project in
        required: false
        type: string
        default: .
      path-to-__version__-file:
        description: The path to a Python file containing a `__version__` variable
        required: false
        type: string
      python-version:
        description: The Python version to build with
        required: false
        type: string
        default: '3.11'
      release-tag:
        description: The release tag to deploy
        required: true
        type: string
      unit-test:
        description: Whether to run unit tests
        required: false
        type: string
        default: 'false'
      update-json-file-path:
        description: The path to a JSON file containing a `version` top level key
        required: false
        type: string
      update-pyproject-toml:
        description: Update the pyproject.toml version
        required: false
        type: string
        default: 'true'
      update-yaml-file-path:
        description: The path to a YAML file containing a `version` variable
        required: false
        type: string

jobs:
  draft-release:
    name: Draft Release ${{ inputs.release-tag }}
    runs-on: ubuntu-latest
    outputs:
      release-draft-url: ${{ steps.draft-release.outputs.html_url }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Draft Release
        id: draft-release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        with:
          publish: false
          tag: ${{ inputs.release-tag }}
          version: ${{ inputs.release-tag }}

  deploy-to-development:
    name: Deploy to Development
    if: |
      always() && !failure() &&
      inputs.build-type &&
      needs.draft-release.result == 'success'
    needs: draft-release
    uses: ./.github/workflows/__deploy.yml
    permissions:
      id-token: write
    with:
      deploy-to: ${{ inputs.deploy-to }}
      environment: development
      release-tag: ${{ inputs.release-tag }}
    secrets: inherit

  publish-release:
    name: Push ${{ !inputs.build-type && !inputs.deploy-to && '& Publish ' || '' }}Release
    runs-on: ubuntu-latest
    needs:
      - deploy-to-development
      - draft-release
    if: always() && !failure()
    environment: production
    env:
      TAG: ${{ inputs.release-tag }}
    outputs:
      release-tag: ${{ inputs.release-tag }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: main
          token: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Update `${{ inputs.path-to-__version__-file }}` __version__
        if: inputs.path-to-__version__-file
        env:
          FILE: ${{ inputs.path-to-__version__-file }}
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"$TAG\"/" "${FILE}"
          git add "${FILE}"

      - name: Update `pyproject.toml` Version
        if: inputs.update-pyproject-toml == 'true'
        run: |
          sed -i "s/^version = .*/version = \"$TAG\"/" pyproject.toml
          git add pyproject.toml

      - name: Update `${{ inputs.update-json-file-path }}` Version
        if: inputs.update-json-file-path
        env:
          FILE: ${{ inputs.update-json-file-path }}
        run: |
          sed -i "s/^  \"version\": \".*\",/  \"version\": \"$TAG\",/" "${FILE}"
          git add "${FILE}"

      - name: Update `${{ inputs.update-yaml-file-path }}` Version
        if: inputs.update-yaml-file-path
        env:
          FILE: ${{ inputs.update-yaml-file-path }}
        run: |
          sed -i "s/^version: .*/version: $TAG/" "${FILE}"
          git add "${FILE}"

      - name: Commit Changes
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          git config user.email "worgarside.dev@gmail.com"
          git config user.name "worgarside-dev"

          git commit -m "${TAG}" --allow-empty

      - name: Push Branch
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_TOKEN }}
        run: |
          git config user.email "worgarside@gmail.com"
          git config user.name "worgarside"

          git fetch origin
          git rebase origin/main

          git push "https://${GH_TOKEN}@github.com/${{ github.repository }}" main --force

      - name: Publish Release Notes
        if: |
          !inputs.build-type && !inputs.deploy-to
        env:
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          gh release edit "${TAG}" \
            --draft=false \
            --repo ${{ github.repository }}

  run-production-build:
    name: Run Production Build
    if: |
      always() && !failure() &&
      inputs.build-type
    needs:
      - publish-release
    uses: ./.github/workflows/__build.yml
    with:
      build-branch: ${{ inputs.build-branch }}
      build-type: ${{ inputs.build-type }}
      environment: production
      node-build-directory: ${{ inputs.node-build-directory }}
      python-version: ${{ inputs.python-version }}
      release-tag: ${{ needs.publish-release.outputs.release-tag }}
    secrets: inherit

  deploy-to-production:
    name: Deploy to Production
    if: |
      always() && !failure() &&
      needs.run-production-build.result == 'success'
    needs:
      - run-production-build
    uses: ./.github/workflows/__deploy.yml
    permissions:
      id-token: write
    with:
      deploy-to: ${{ inputs.deploy-to }}
      environment: production
      release-tag: ${{ inputs.release-tag }}
    secrets: inherit
