---
name: Build & Publish

on:
  workflow_call:
    inputs:
      build-branch:
        description: The branch to build from
        required: true
        type: string
      build-type:
        description: The type of build to perform ("python", "node")
        required: true
        type: string
      commit-build-directory:
        description: Whether to commit (and push) the build directory
        required: false
        type: boolean
        default: false
      environment:
        description: The environment to deploy to
        required: true
        type: string
      node-build-directory:
        description: The directory to build the Node project in
        required: false
        type: string
        default: .
      publish-to-pypi:
        description: Whether to publish to PyPI
        required: false
        type: boolean
        default: false
      python-version:
        description: The Python version to build with
        required: false
        type: string
        default: '3.11'
      release-tag:
        description: The tag of the release to add the artifacts to
        required: true
        type: string
    secrets:
      gh-token:
        description: The GitHub token
        required: true
      PYPI_API_TOKEN:
        description: The PyPi API token
        required: true

jobs:
  log-inputs:
    name: Log Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Log Inputs
        if: runner.debug == '1'
        env:
          INPUTS: ${{ toJson(inputs) }}
        run: |
          echo -e "\`\`\`json\n$INPUTS\n\`\`\`" >> "$GITHUB_STEP_SUMMARY"

  build-python:
    name: Build (Python)
    if: inputs.build-type == 'python'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.build-branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Build
        run: poetry build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/

  build-node:
    name: Build (Node)
    if: inputs.build-type == 'node'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      GH_TOKEN: ${{ secrets.gh-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.build-branch }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ${{ inputs.node-build-directory }}/package-lock.json
          node-version: 18

      - name: Install Dependencies
        run: |
          cd ${{ inputs.node-build-directory }}
          rm -rf .next/
          npm ci --verbose

      - name: Build
        run: |
          cd ${{ inputs.node-build-directory }}
          npm run build

      - name: Commit Build Directory
        if: inputs.commit-build-directory
        run: |
          git config --global user.name "worgarside-dev"
          git config --global user.email "worgarside.dev@gmail.com"

          git add ${{ inputs.node-build-directory }}/.next/
          git commit -m "Built version ${{ inputs.release-tag }} ðŸ“¦"
          git push origin ${{ inputs.build-branch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ${{ inputs.node-build-directory }}/.next/

  add-artifacts-to-release-notes:
    name: Add Artifacts to Release Notes
    runs-on: ubuntu-latest
    needs:
      - build-python
      - build-node
    if: |
      always() &&
      (
        needs.build-python.result == 'success' ||
        needs.build-node.result == 'success'
      )
    outputs:
      pr-is-draft: ${{ steps.is-pr-draft.outputs.pr-is-draft }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Upload Artifacts
        run: |
          gh release upload ${{ inputs.release-tag }} dist/* \
          --clobber \
          --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.gh-token }}

      - name: Check Release PR is not Draft
        id: is-pr-draft
        env:
          GH_TOKEN: ${{ secrets.gh-token }}
        run: |
          echo "pr-is-draft=$(
            gh pr list \
            --json baseRefName,headRefName,isDraft \
            --repo ${{ github.repository }} \
            --jq '
              .[] | select(
                .baseRefName == "main"
              ) | select(
                .headRefName == "release/${{ inputs.release-tag }}"
              ) | .isDraft
            '
          )" >> "$GITHUB_OUTPUT"

      - name: Summarise Environment
        run: |
          echo -e "Environment:  \`${{ inputs.environment }}\`"
          echo -e "Build Branch: \`${{ inputs.build-branch }}\`"
          echo -e "Release Tag:  \`${{ inputs.release-tag }}\`"
          echo -e "PR is Draft:  \`${{ steps.is-pr-draft.outputs.pr-is-draft }}\`"

  publish-to-pypi:
    name: Publish to PyPI
    environment: ${{ inputs.environment }}
    if: |
      inputs.publish-to-pypi == 'true' &&
      needs.add-artifacts-to-release-notes.outputs.pr-is-draft != 'true' &&
      success()
    needs:
      - add-artifacts-to-release-notes
      - build-python
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: ${{ inputs.environment == 'development' }}
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ vars.REPOSITORY_URL }}
