---
name: '"CI: Validation" Runner'

on:
  workflow_call:
    inputs:
      build-branch:
        description: The branch to build from
        required: false
        type: string
      build-type:
        description: The type of build to perform ("python", "node")
        required: false
        type: string
      node-build-directory:
        description: The directory to build the Node project in
        required: false
        type: string
        default: .
      python-version:
        description: The Python version to build with
        required: false
        type: string
        default: '3.11'
      unit-test:
        description: Whether to run unit tests
        required: false
        type: string
        default: 'false'
    outputs:
      release-tag:
        description: The release tag to use
        value: ${{ jobs.get-release-version.outputs.release-tag }}

jobs:
  actionlint:
    name: Lint GitHub Actions Workflows
    uses: ./.github/workflows/__actionlint.yml

  test:
    name: Test
    if: inputs.build-type == 'python' && inputs.unit-test == 'true'
    uses: ./.github/workflows/__test.yml
    with:
      python-version: ${{ inputs.python-version }}
      test-branch: ${{ inputs.build-branch }}
    secrets: inherit

  run-sonarcloud-scan:
    name: Run SonarCloud Scan
    needs:
      - test
    if: always() && !failure()
    uses: ./.github/workflows/__sonarcloud.yml
    with:
      branch: ${{ inputs.build-branch }}
      coverage-artifact: coverage-report-${{ github.run_id}}
    secrets: inherit

  get-release-version:
    name: Get Release Version
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.get-release-version.outputs.release-tag }}
    steps:
      - name: Get Release Version
        id: get-release-version
        env:
          BUILD_BRANCH: ${{ inputs.build-branch }}
          GH_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}
        run: |
          if [[ "${BUILD_BRANCH}" != "refs/heads/main" ]]; then
            echo "release-tag=null" >> "${GITHUB_OUTPUT}"
            echo "\`release-tag\`: \`null\` <sup>(As expected, this _is_ CI for a PR)</sup>" \
              >> "${GITHUB_STEP_SUMMARY}"
            exit 0
          fi

          latest_release=$(
            gh release view \
              --repo ${{ github.repository }} \
              --json publishedAt,tagName
            ) || latest_release='{"publishedAt": "1970-01-01T00:00:00Z", "tagName": "0.0.0"}'

          latest_release_tag=$(echo "$latest_release" | jq -r '.tagName')
          latest_release_date=$(echo "$latest_release" | jq -r '.publishedAt')

          echo "\`latest_release_tag\`: \`$latest_release_tag\`" >> "${GITHUB_STEP_SUMMARY}"
          echo "\`latest_release_date\`: \`$latest_release_date\`" >> "${GITHUB_STEP_SUMMARY}"

          all_prs=$(
            gh pr list \
            --repo ${{ github.repository }} \
            --state merged \
            --json baseRefName,headRefName,labels,number,mergedAt,title,url \
            --limit 500 \
            --jq '
                .[] |
                select(
                  (
                    .baseRefName == "main" or
                    .baseRefName == "develop"
                  ) and
                  (.headRefName != "repo-sync/github-config-files/default") and
                  (
                    .labels |
                    map(.name) |
                    index("skip-changelog") |
                    not
                  ) and
                  (
                    .labels |
                    map(.name) |
                    index("non-functional") |
                    not
                  )
                )
            '
          )

          echo -e "All PRs\n\`\`\`json\n$all_prs\n\`\`\`\n---\n" \
            >> "${GITHUB_STEP_SUMMARY}"

          new_prs=$(
            echo "$all_prs" |
            jq -r --arg latest_release_date "$latest_release_date" '
              select(.mergedAt > $latest_release_date)
            '
          )

          echo -e "New PRs\n\`\`\`json\n$new_prs\n\`\`\`\n---\n" \
            >> "${GITHUB_STEP_SUMMARY}"

          new_pr_labels=$(
            echo "$new_prs" |
            jq -r '
              .labels[] |
              select(
                .name == "dependencies" or
                .name == "major" or
                .name == "minor" or
                .name == "patch" or
                .name == "refactor" or
                .name == "bug"
              ) |
              .name
            '
          )

          echo -e "New PR Labels:\n\`\`\`\n$new_pr_labels\n\`\`\`" \
            >> "${GITHUB_STEP_SUMMARY}"

          if echo "$new_pr_labels" | grep -q 'major' ||
            [ "$new_pr_labels" = "major" ]
          then
              semver_bump="major"
          elif echo "$new_pr_labels" | grep -q 'minor' ||
            [  "$new_pr_labels" = "minor" ]
          then
              semver_bump="minor"
          elif echo "$new_pr_labels" | grep -q 'dependencies' ||
            echo "$new_pr_labels" | grep -q 'patch' ||
            echo "$new_pr_labels" | grep -q 'bug' ||
            [ "$new_pr_labels" = "dependencies" ] ||
            [ "$new_pr_labels" = "patch" ] ||
            [ "$new_pr_labels" = "refactor" ] ||
            [ "$new_pr_labels" = "bug" ]
          then
              semver_bump="patch"
          else
              echo "No matching label found" >> "${GITHUB_STEP_SUMMARY}"
              echo -e "\`\`\`\n$new_pr_labels\n\`\`\`" >> "${GITHUB_STEP_SUMMARY}"

              semver_bump="null"
          fi

          echo "SemVer Bump: \`$semver_bump\`" >> "${GITHUB_STEP_SUMMARY}"

          if [[ "${semver_bump}" == "null" ]]; then
            echo "release-tag=null" >> "$GITHUB_OUTPUT"
            echo "\`release-tag\`: \`null\`" >> "${GITHUB_STEP_SUMMARY}"
            exit 0
          fi

          IFS=. read major minor patch <<< "${latest_release_tag}"

          echo "Latest Major: \`$major\`" >> "${GITHUB_STEP_SUMMARY}"
          echo "Latest Minor: \`$minor\`" >> "${GITHUB_STEP_SUMMARY}"
          echo "Latest Patch: \`$patch\`" >> "${GITHUB_STEP_SUMMARY}"

          case "${semver_bump}" in
            major)
              echo "SemVer label is major" >> "${GITHUB_STEP_SUMMARY}"
              major=$(expr $major + 1)
              echo "Incremented major to $major" >> "${GITHUB_STEP_SUMMARY}"
              minor=0
              patch=0
              ;;
            minor)
              echo "SemVer label is minor" >> "${GITHUB_STEP_SUMMARY}"
              minor=$(expr $minor + 1)
              echo "Incremented minor to $minor" >> "${GITHUB_STEP_SUMMARY}"
              patch=0
              ;;
            patch)
              echo "SemVer label is patch" >> "${GITHUB_STEP_SUMMARY}"
              patch=$(expr $patch + 1)
              echo "Incremented patch to $patch" >> "${GITHUB_STEP_SUMMARY}"
              ;;
          esac

          release_tag="$major.$minor.$patch"

          echo "release-tag=$release_tag" >> "${GITHUB_OUTPUT}"
          echo "\`release-tag\`: \`$release_tag\`" >> "${GITHUB_STEP_SUMMARY}"

  run-development-build:
    name: Run Development Build
    needs:
      - get-release-version
    if: |
      always() && !failure() &&
      inputs.build-type
    uses: ./.github/workflows/__build.yml
    with:
      build-branch: ${{ inputs.build-branch }}
      build-type: ${{ inputs.build-type }}
      environment: development
      node-build-directory: ${{ inputs.node-build-directory }}
      python-version: ${{ inputs.python-version }}
      release-tag: ${{ needs.get-release-version.outputs.release-tag }}
    secrets: inherit
