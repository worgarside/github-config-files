

[tool.poetry]
name = "github-config-files"
version = "0.1.0"
description = ""
authors = ["Will Garside <worgarside@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pyyaml = "^6.0.2"
pydantic = "^2.8.2"
httpx = "^0.27.0"
wg-utilities = { extras = ["logging"], version = "^5.15.4" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#######################
# Tool Configurations #
#######################

[tool.mypy]
plugins = ["pydantic.mypy"]
mypy_path = ["utilities/readme", "utilities/reject_stale_deployments"]

follow_imports = "normal"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true

no_implicit_optional = true
strict_optional = true

strict_equality = true
explicit_package_bases = true
show_error_codes = true
enable_error_code = [
  "arg-type",           # Checks for argument types in function calls.
  "assignment",         # Validates types of variable assignments.
  "return-value",       # Ensures that return values match the declared type.
  "call-overload",      # Validates correct use of method/function overloads.
  "operator",           # Checks operator usage against expected types.
  "index",              # Validates types used in indexing operations.
  "attr-defined",       # Checks if attributes exist in classes/objects.
  "no-untyped-call",    # Prevents calls to untyped functions in typed contexts.
  "unreachable",        # Warns about code that can never be executed.
  "truthy-bool",        # Ensures that boolean expressions are boolean in type.
  "union-attr",         # Checks for attribute access in unions safely.
  "dict-item",          # Checks for proper types used in dictionary items.
  "unused-awaitable",   # Warns if an awaitable is not awaited.
  "override",           # Ensures overridden methods match the signature in base class.
  "list-item",          # Checks type consistency of list items.
  "return",             # Ensures all code paths in a function return a value if needed.
  "type-var",           # Ensures type variables are used correctly.
  "valid-type",         # Validates types used in annotations are recognized.
  "func-returns-value", # Ensures functions declared with a return type actually return a value.
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.codespell]
skip = '*.json,*.csv,*.xml,*.lock,README.md'

[tool.ruff]
fix = true
preview = true
line-length = 90
lint.select = ["ALL"]
lint.ignore = [
  "ANN401", # https://docs.astral.sh/ruff/rules/any-type/
  "D107",   # https://docs.astral.sh/ruff/rules/undocumented-public-init/
  "S314",   # https://docs.astral.sh/ruff/rules/suspicious-xml-element-tree-usage/
  "TRY003", # https://docs.astral.sh/ruff/rules/raise-vanilla-args/
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
  "TD002",  # https://docs.astral.sh/ruff/rules/missing-todo-author/
  "TD003",  # https://docs.astral.sh/ruff/rules/missing-todo-link/
  "EM",     # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "FIX002", # https://docs.astral.sh/ruff/rules/line-contains-todo/
  "ANN101", # https://docs.astral.sh/ruff/rules/missing-type-self/
  "CPY",    # https://docs.astral.sh/ruff/rules/#flake8-copyright-cpy
  "INP001", # https://docs.astral.sh/ruff/rules/implicit-namespace-package/
  "DOC501", # https://docs.astral.sh/ruff/rules/docstring-missing-exception/
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.ruff.lint.pycodestyle]
max-line-length = 115

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
allow-dunder-method-names = ["__mermaid__"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.vulture]
min_confidence = 70
paths = ["utilities"]
sort_by_size = true

[tool.creosote]
paths = ["utilities"]
deps-file = "pyproject.toml"
sections = ["tool.poetry.dependencies"]
exclude-deps = []
